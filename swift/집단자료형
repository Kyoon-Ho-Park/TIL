1. 배열(Array)
  (1) 정적선언 (사전에 미리 배열의 크기, 값 초기화)
    var cities = ["Seoul", "LA", "Tokyo", "NW", "Busan"]
    
  (2) 동적선언 (동적으로 데이터 추가, 배열 크기 조절)
    var cities = Array<String>()
    -> var cities = [String]() 스위프트 GM버전.
    
  (3) 선언&초기화
    - 선언 : var cities : [String]
    - 선언&초기화 : var cities : [String]
    
  (4) 배열확장
    append(_:) = 맨뒤 추가
    insert(_:at:) = at: 뒤에 나오는 인덱스에 추가
    append(contentsOf:) = 추가되는 값이 여러개일때
    
2. 집합(Set) : unordered, 중복X
  (1) 선언&초기화
    var s = Set<Generic Type>()
    
  (2) 집합동적추가 : insert(_:)
  
  (3) 집합연산
    intersection(_:) 교집합
    union(_:) 합집합
    substract(_:) 차집합
    symmetricDifferent(_:) 어느 한쪽에만 있는 아이템
  
3. 튜플 
   - 여러가지 타입의 아이템 저장, 상수적 성격으로 인하여 값 추가/삭제 불가능
   - 소괄호() 사용
   - for ~ in 구문 사용 X (순회특성 지원X)
   
   (1) 선언&초기화
     let tupleValue = ("a", "b", 1, 2.5, true)
     tupleValue.0 // "a"
     tupleValue.1 // "b"
     tupleValue.2 // 1
     tupleValue.3 // 2.5
     tupleValue.4 // true
     
   (2) 튜플 바인딩 : 튜플상수로 데이터값을 바인딩
     let tv : (String, Character, Int, Float, Bool) = ("a", "b", 1, 2.5, true)
     let (a,b,c,d,e) = tv
     a // "a"
     b // "b"
     c // 1
     d // 2.5
     e // true
     
 4. 딕셔너리
   - (JAVA) HashMap 객체와 유사. 
   - key : value 의 구조
   
   (1) 선언&초기화
     //방법1. (Dictionary 키워드 사용)
      var type1 = Dictionary<String, Int>()
     //방법2.
      var type2 = [String : Int]()
      
   (2) 관련 메소드
     //데이터 추가
      updateValue("값", forKey:"키")
      removeValue(forKey:"키")
      isEmpty : 데이터 유무 체크 true/false
      count : 데이터 개수 확인
    
   (3) 순회 탐색
      //방법1.
      for row in capital {
        let (key, value) = row
      }
      //방법2.
      for (key, value) int capital {
        //
      }
      
    
    
